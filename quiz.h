/*
 * quiz.h
 * This file contains all the actual quizzes- plus the quiz item object.
 * Author: Paul Clarke
 *
 */

#ifndef __QUIZ_H_INCLUDED__
#define __QUIZ_H_INCLUDED__


#include "theory.h"
#include "synth1.h"
#include <vector>
#include <string>

std::vector<int> *randints(int start, int stop);

struct ChordQItem : Chord {
    ChordQItem(std::vector<Note> nv, Key k, std::string suf) : Chord(nv, k), suffix(suf) {}
    ChordQItem() : ChordQItem({}, Key("C"), "") {}
    ChordQItem transpose(s_note intv) const;
    std::string suffix;
};

struct MultiQItem {
    MultiQItem(std::vector<ChordQItem> c, std::string i) : chords(c), info(i) {}
    MultiQItem() : MultiQItem({}, "") {}
    std::vector<ChordQItem> chords;
    std::string info;
};

std::vector<ChordQItem> transpose(std::vector<ChordQItem> chords, s_note intv);
std::vector<ChordQItem> transpose_r(std::vector<ChordQItem> chords, int lower, int upper,
                                    int max_sharps, int min_sharps);
int max_mn(std::vector<ChordQItem> chords);
int min_mn(std::vector<ChordQItem> chords);

class Quiz
{
public:
    Quiz(NoteSynth *s) : synth(s) {}
    virtual void begin() {}
    virtual int next_round() {}
protected:
    NoteSynth* synth;
};

class SingleQuiz : public Quiz
{
public:
    SingleQuiz(NoteSynth *s) : Quiz(s) {}
    virtual void begin() {}
    virtual int next_round();
protected:
    virtual ChordQItem get_item() {}
};

class MultiQuiz : public Quiz
{
public:
    MultiQuiz(NoteSynth *s) : Quiz(s) {}
    virtual void begin() {}
    virtual int next_round();
protected:
    virtual MultiQItem get_item() {}
};

class Majmin7Quiz : public SingleQuiz
{
public:
    Majmin7Quiz(NoteSynth *s) : SingleQuiz(s) {}
    void begin() {}
protected:
    ChordQItem get_item();
};

class RootMajMQuiz : public MultiQuiz
{
public:
    RootMajMQuiz(NoteSynth *s) : MultiQuiz(s) {}
    void begin() {}
protected:
    MultiQItem get_item();
};


/* transpose q: Tranpose a vector of chord quiz items. */
std::vector<ChordQItem> transpose_q(std::vector<ChordQItem> chords, s_note intv);

/* transpose_rand: Randomly transpose a chord or chords. Generator for other quizzes.

   Given a chord in the key k, generate a ChordQItem of that chord transposed to
   a random key in the same mode, and put somewhere in the range of midi notes
   [min_mn, max_mn]. The chord will be transposed to a key with a maximum of
   flatsharp_limit flats or sharps(if flatsharp_limit is negative,
   Key::get_flatsharp_limit() will be used). The name of the QItem will be
   generated by a given suffix appended to the key name. If show_lowest is true,
   then the value of the lowest note will be appended to this name. */

/* triad in a random key and inversion */
ChordQItem major_triad_quiz();
/* root positioion major and minor seventh chords */
ChordQItem quiz_root_pos_majmin_7ths();

MultiQItem maj_root_movements();

#endif
